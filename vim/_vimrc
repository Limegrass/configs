set encoding=utf-8
scriptencoding utf-8
" ============================================================================
" VIM-PLUG BLOCK
" ============================================================================
if has('win32')
  call plug#begin('~/vimfiles/plugged')
else
  call plug#begin('~/.vim/plugged')
endif
" Editing
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'sjl/gundo.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-obsession'
" Plug 'majutsushi/tagbar'

" Syntax, Typically requires some setup
Plug 'w0rp/ale'
"Plug 'scrooloose/syntastic'
if has('nvim')
  Plug 'roxma/nvim-completion-manager'
else
  Plug 'Valloric/YouCompleteMe'
  " YouCompletMe settings. leader+g goes to definition
  let g:ycm_autoclose_preview_window_after_completion=1
  nnoremap <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
endif

" File navigation
Plug 'kien/ctrlp.vim'

" Appearances
Plug 'flazz/vim-colorschemes'
Plug 'bling/vim-airline'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'vim-airline/vim-airline-themes'

" Git
Plug 'tpope/vim-fugitive'

call plug#end()

" ============================================================================
" PLUGIN-RELATED SETTINGS
" ============================================================================
" Indent Guides enabled by default
let g:indent_guides_enable_on_vim_startup = 1

" Airline theme
let g:airline_theme='deus'

" Ctrl-P
let g:ctrlp_working_path_mode = 0

" Gundo
nnoremap <leader>u :GundoToggle<CR>
let g:gundo_prefer_python3 = 1

" Vim-commentary bind
nnoremap <leader><Tab> :Commentary<CR>
vnoremap <leader><Tab> :Commentary<CR>

" Obsession
nnoremap <leader>O :Obsession<CR>

" ============================================================================
" FUNCTION DEFINITIONS
" ============================================================================

"System Settings
if has('win32')
  source $VIMRUNTIME/mswin.vim
  behave mswin
endif

set diffexpr=MyDiff()
function! MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction

function! ChangeTabSizing(oldSize, newSize) range
  set expandtab
  let &tabstop=a:oldSize
  set expandtab!
  retab!
  let &tabstop=a:newSize
  set expandtab
  retab
endfunction

" ============================================================================
" BASIC SETTINGS
" ============================================================================

" General Settings
set ruler
set incsearch
set nohlsearch
set ignorecase
set smartcase
set number
set wrap
set guioptions=c
set listchars=tab:▸\ ,trail:·
set list
set undofile
" :vs and :sp direction option
set splitright
set splitbelow
" Enable code bracket folding
set foldmethod=indent
set foldlevel=99
" Prevent change to Hiragana
set iminsert=0
set imsearch=-1

" Font settings
if has('gui_running')
  set guifont=Consolas:h12:cANSI:qDRAFT
endif

" Character limit highlighting
"highlight OverLength ctermbg=red ctermfg=white guibg=#592929
"match OverLength /\%81v.\+/
call matchadd('ColorColumn', '\%81v.', 100)

" Colors
if has('gui_running')
  colorscheme corporation "Obtain corporation from vivfy
else
  if $TERM == "xterm-256color"
    set t_Co=256
    colorscheme hybrid
    set background=dark
  else
    colorscheme zenburn
  endif
endif

" Indent Settings
set expandtab
set smartindent
set autoindent
set history=100
" Tab-sizing is 4
set tabstop=4
set shiftwidth=4
set softtabstop=-1
set selection=inclusive
" Initial size
if has('gui_running')
  set lines=50 columns=100
endif
"Other general settings
set backspace=indent,eol,start

" ============================================================================
" KEYBINDINGS AND REMAPS
" ============================================================================
" NORMAL MODE
" Remap J, K some to nagivate visible lines
nnoremap j gj
nnoremap k gk
nnoremap $ g$
nnoremap 0 g0
" Change tab structure in normal/visual mode
nnoremap <Tab> >>
nnoremap <S-Tab> <<
vnoremap <Tab> >
vnoremap <S-Tab> <
" Load a session or refresh vimrc
nnoremap <leader>ss :source Session.vim<CR>
nnoremap <leader>S :source $MYVIMRC<CR>
" Change working directory to current file
nnoremap <leader>d :cd %:p:h<CR>
" Open file explorer on current file location
if has('win32')
  nnoremap <leader>e :silent !explorer.exe %:p:h<CR>
endif
" Copy file path to system register
nnoremap <leader>c :let @+=expand("%:p")<CR>
" Toggles off Highlighting
nnoremap <leader>h :set hlsearch!<CR>
" Toggles tab-to-space conversion
nnoremap <leader>t :set expandtab!<CR>
" Switch between splits
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-L> <C-W>l
nnoremap <C-H> <C-W>h
" Split nagivation from a terminal split on neovim
if has('nvim')
  tnoremap <C-J> <C-\><C-N><C-W>j
  tnoremap <C-K> <C-W><C-K>k
  tnoremap <C-L> <C-W><C-L>l
  tnoremap <C-H> <C-W><C-H>h
endif
" Switch between tabs
nnoremap <leader>[ :tabp<CR>
nnoremap <leader>] :tabn<CR>
" Remap tag jump to Shift+Ctrl+T, Map Ctrl+T to new tab
nnoremap <S-C-T> <C-T>
nnoremap <C-T> :tabedit<CR>
" Fold in normal mode with space
nnoremap <space> za
" Mark TODO as DONE
nnoremap <leader>z :s/\<TODO\>/\<DONE\>/<CR>
vnoremap <leader>z :s/\<TODO\>/\<DONE\>/<CR>
nnoremap <leader>T :vimgrep /\<TODO\>/ %<CR>

" VISUAL MODE
vnoremap j gj
vnoremap k gk
vnoremap $ g$
vnoremap 0 g0

" INSERT MODE
inoremap <C-BS> <C-W>
" Delete word forward in Insert Mode, doesn't work for single letter words.
inoremap <C-Del> <ESC>ldei
inoremap <LEFT> <ESC>gha
inoremap <RIGHT> <ESC>lha
inoremap <UP> <ESC>gka
inoremap <DOWN> <ESC>gja

" ABBREVEATIONS
" Force verticle splits for help files
cnoreabbrev <expr> help ((getcmdtype() is# ':'    && getcmdline() is# 'help')?('set columns=200<CR>:vert help'):('help'))
cnoreabbrev <expr> h ((getcmdtype() is# ':'    && getcmdline() is# 'h')?('set columns=200<CR>:vert help'):('h'))
" Automatically resize window to accomodate a right buffer
cnoreabbrev <expr> rsp ((getcmdtype() is# ':'  && getcmdline() is# 'rsp')?('set columns=200<CR>:vs'):('rsp'))
cnoreabbrev <expr> bq ((getcmdtype() is# ':'  && getcmdline() is# 'bq')?('q<CR>:set columns=100<CR>'):('bq'))



" ============================================================================
" Rebind in individual machine vimrcs
" ============================================================================
" Default Location
" if has('win32')
"   cd G:/Vim_Files
" endif

" Edit vimrc
" if has('win32')
"   nnoremap <leader>v :edit G:\Git\configs\vim\_vimrc<CR>
"   "nnoremap <leader>V :set columns=200<CR>:vs $MYVIMRC<CR>
"   nnoremap <leader>V :tabnew G:\Git\configs\vim\_vimrc<CR>
" else
"   nnoremap <leader>v :edit $MYVIMRC<CR>
"   "nnoremap <leader>V :set columns=200<CR>:vs $MYVIMRC<CR>
"   nnoremap <leader>V :tabnew $MYVIMRC<CR>
" endif

" Change directory to Git/Text folder
" nnoremap <leader>f :cd G:/Vim_Files<CR>
" nnoremap <leader>F :cd G:/Git<CR>
