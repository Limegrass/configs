set encoding=utf-8
scriptencoding utf-8
let GVIM_WIDTH = 100
let GVIM_HEIGHT = 50
cd ~
if filereadable('machine.vim')
  source machine.vim
endif
" ==============================================================================
" VIM-PLUG BLOCK
" ==============================================================================
if has('win32')
  call plug#begin('~/vimfiles/plugged')
else
  call plug#begin('~/.vim/plugged')
endif

" Editing
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'sjl/gundo.vim'
Plug 'haya14busa/incsearch.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-obsession'
Plug 'wellle/targets.vim'

" Syntax, Typically requires some setup
if !has('nvim')
  Plug 'roxma/vim-hug-neovim-rpc'
endif
Plug 'roxma/nvim-yarp'
Plug 'ncm2/ncm2'
Plug 'ncm2/ncm2-bufword'
" Plug 'ncm2/ncm2-tmux'
Plug 'ncm2/ncm2-path'
Plug 'ncm2/ncm2-jedi'
Plug 'ncm2/ncm2-pyclang'
Plug 'ncm2/ncm2-vim' | Plug 'Shougo/neco-vim'
Plug 'ncm2/ncm2-tern'
Plug 'ncm2/ncm2-cssomni'
Plug 'ncm2/ncm2-ultisnips' " Depends on SirVer/ultisnips
Plug 'ncm2/ncm2-snipmate' | Plug 'tomtom/tlib_vim'
  \ | Plug 'marcweber/vim-addon-mw-utils' | Plug 'garbas/vim-snipmate'

" Currently installed 'linters'
" on main machine: vint, proselint, clang, autopep8, javac, jedi
Plug 'w0rp/ale'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'davidhalter/jedi-vim'
Plug 'OrangeT/vim-csharp'
Plug 'lervag/vimtex'
Plug 'cakebaker/scss-syntax.vim'
Plug 'mhartington/nvim-typescript'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }

" Appearances
Plug 'flazz/vim-colorschemes'
Plug 'bling/vim-airline'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'vim-airline/vim-airline-themes'

" Git
Plug 'tpope/vim-fugitive'

call plug#end()

" ==============================================================================
" PLUGIN-RELATED SETTINGS
" ==============================================================================
" Indent Guides enabled by default
let g:indent_guides_enable_on_vim_startup = 1

" Airline theme
let g:airline_theme='deus'

" FZF
nnoremap <C-SPACE> :FZF<CR>

" Gundo
nnoremap <leader>u :GundoToggle<CR>
let g:gundo_prefer_python3 = 1

" Vim-commentary bind
nnoremap <leader><Tab> :Commentary<CR>
vnoremap <leader><Tab> :Commentary<CR>

" Obsession
nnoremap <leader>O :Obsession<CR>

" ncm: nvim completion manager
autocmd BufEnter * call ncm2#enable_for_buffer()
" IMPORTANT: :help Ncm2PopupOpen for more information
set completeopt=noinsert,menuone,noselect
" let g:python3_host_prog="C:\Python\x86\3.5\python.exe"
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Ultisnips with ncm
let g:UltiSnipsExpandTrigger		= "<Plug>(ultisnips_expand)"
let g:UltiSnipsJumpForwardTrigger	= "<c-j>"
let g:UltiSnipsJumpBackwardTrigger	= "<c-k>"
let g:UltiSnipsRemoveSelectModeMappings = 0
inoremap <silent> <C-Space> <C-R>=cm#sources#ultisnips#trigger_or_popup("\<Plug>(ultisnips_expand)")<CR>

" ALE
let g:airline#extensions#ale#enabled = 1
let g:ale_lint_on_enter = 0
let g:ale_lint_on_text_changed = 'never'
" ALE Navigation
nmap <silent> <F3> <Plug>(ale_next_wrap)
nmap <silent> <F4> <Plug>(ale_previous_wrap)

" incsearch rebindings
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" Jedi-vim
let g:jedi#auto_initialization = 1
let g:jedi#use_tabs_not_buffers = 1
let g:jedi#completions_enabled = 0
let g:jedi#smart_auto_mappings = 0
" jedi-vim Bindings
let g:jedi#goto_command = "<leader>d"
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = ""
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
let g:jedi#completions_command = ""
let g:jedi#rename_command = "<leader>r"

" ncm-clang
let g:clang_make_default_keymappings = 0
let g:clang_auto_user_options = ''

" ==============================================================================
" FUNCTION DEFINITIONS
" ==============================================================================

set diffexpr=MyDiff()
function! MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction

function! ChangeTabSizing(oldSize, newSize) range
  set expandtab
  let &tabstop=a:oldSize
  let &softtabstop=a:oldSize
  let &shiftwidth=a:oldSize
  set expandtab!
  retab!
  let &tabstop=a:newSize
  let &softtabstop=a:newSize
  let &shiftwidth=a:newSize
  set expandtab
  retab
endfunction

function! Preserve(command)
  " save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" ==============================================================================
" AUTOCOMMANDS
" ==============================================================================
" QuickFix window on vimgrep
if has('autocmd')
  augroup quickfix
    autocmd!
    " autocmd QuickFixCmdPost [^l]* cwindow
    " autocmd QuickFixCmdPost l*    lwindow
    autocmd CmdwinEnter * nnoremap <CR> <CR>
    autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>
  augroup END

  " Set spellchecking on for text buffers
  augroup textspell
    autocmd!
    autocmd Filetype text setlocal spell
    autocmd Filetype help setlocal nospell
  augroup END

  " Tab setting in vimscript and html to 2
  " C/C++? According to Google Style. Removed for now
  augroup tabbing
    autocmd!
    autocmd Filetype vim,html setlocal tabstop=2
    autocmd Filetype vim,html setlocal shiftwidth=2
  augroup END

  " Autocompletion for HTML tags
  augroup htmlBinds
    autocmd!
    autocmd Filetype html,xml inoremap <buffer> </ </<C-X><C-O>
  augroup END
endif


" ==============================================================================
" BASIC SETTINGS
" ==============================================================================

" GENERAL SETTINGS
set ruler
set incsearch
" set nohlsearch
set ignorecase
set smartcase
set number
set wrap
set wildmenu
set guioptions=c
set listchars=tab:▸\ ,trail:·
set list
set selection=inclusive
set undofile
set history=100
set lazyredraw
set cursorline
set hidden
setlocal spelllang=en_us
" :vs and :sp direction option
set splitright
set splitbelow
" Enable code bracket folding
set foldmethod=indent
set foldlevel=99
" Prevent change to Hiragana
set iminsert=0
set imsearch=-1
" Set default clipboard to be the system register
" set clipboard=unnamed

" FONT SETTINGS
if has('gui_running')
  set guifont=Consolas:h12:cANSI:qDRAFT
endif

" Character limit highlighting
"highlight OverLength ctermbg=red ctermfg=white guibg=#592929
"match OverLength /\%81v.\+/
call matchadd('ColorColumn', '\%81v.', 100)

" COLORS
if has('gui_running')
  colorscheme corporation
else
  if $TERM == "xterm-256color"
    set t_Co=256
    colorscheme hybrid
    set background=dark
  else
    colorscheme zenburn
  endif
endif

" INDENT SETTINGS
set expandtab
set smartindent
set autoindent
" Tab-sizing is 4
set tabstop=4
set shiftwidth=4
set softtabstop=-1
" Initial size
if has('gui_running')
  let &lines=GVIM_HEIGHT
  let &columns=GVIM_WIDTH
endif
set backspace=indent,eol,start

" ==============================================================================
" KEYBINDINGS AND REMAPS
" ==============================================================================

" ================================NORMAL MODE===================================
" Remap J, K some to navigate visible lines
nnoremap j gj
nnoremap k gk
nnoremap $ g$
nnoremap 0 g0
" Yank to end of line, yy for line yank
nnoremap Y y$
" Q to replay qq macro
nnoremap Q @q
" Helps me search double enter to insert after word
nnoremap <CR> ea
" Search for word currently under cursor
nnoremap // yiw/<C-R>"
" Load a session or refresh vimrc
nnoremap <leader>ss :source Session.vim<CR>
nnoremap <leader>S :source $MYVIMRC<CR>
" Change working directory to current file
nnoremap <leader>cd :cd %:p:h<CR>
" Open file explorer on current file location
if has('win32')
  nnoremap <leader>e :silent !explorer.exe %:p:h<CR>
endif
" Copy file path to system register
nnoremap <leader>p :let @+=expand("%:p")<CR>
" Toggles off Highlighting
nnoremap <leader>h :set hlsearch!<CR>
" Toggles tab-to-space conversion
nnoremap <leader>t :set expandtab!<CR>
" Toggle spell check
nnoremap <leader>sc :set spell!<CR>
" Navigate out of terminal mode
if has('nvim')
  tnoremap <C-J> <C-\><C-N>
endif
" Remap tag jump to Shift+Ctrl+T, Map Ctrl+T to new tab
nnoremap <S-C-T> <C-T>
nnoremap <C-T> :tabedit<CR>
" Mark TODO as DONE
nnoremap <leader>z :s/TODO/DONE/<CR>
nnoremap <leader>T :vimgrep /TODO/ %<CR>
" Cursor returns that I never use
nnoremap <F1> <C-O>
" tagbar
nnoremap <F2> :TagbarToggle<CR>
nnoremap <ESC> <ESC>:StripTrailingWhiteSpace<CR>

" ================================VISUAL MODE===================================
" Equivalent behavior for visual mode as some normal mode bindings
vnoremap j gj
vnoremap k gk
vnoremap $ g$
vnoremap 0 g0

" Retain selection when indenting in visual mode
vnoremap > >gv
vnoremap < <gv
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv
vnoremap <leader>z :s/TODO/DONE/<CR>

" Search for visual selected
vnoremap // y/<C-R>"<CR>

" This is probably taking it too far
vnoremap <leader>G "gy:Google <C-R>g<CR>

" ================================INSERT MODE===================================
" Common Ctrl-BS functionality in other editors, delete whole word with
" Ctrl-DEL
inoremap <C-BS> <C-W>
" Copy, cut, paste, undo
inoremap <C-Z> <ESC>ua
" Visual line navigation
inoremap <UP> <ESC>gka
inoremap <DOWN> <ESC>gja
" Clean file on ESC
inoremap <ESC> <ESC>:StripTrailingWhiteSpace<CR>

" ================================COMMANDS======================================
" Commands to resize gui window
if has('gui_running')
  command! -nargs=* -complete=file Vs let &columns=GVIM_WIDTH*2 | vs <args>
  command! Bq q | let &columns=GVIM_WIDTH
  command! -bang Bq q! | let &columns=GVIM_WIDTH
endif

" Commands for functions
command! -nargs=+ -range Retab <line1>,<line2>call ChangeTabSizing(<f-args>)
command! -nargs=0 StripTrailingWhiteSpace call Preserve('%s/\s\+$//e')
command! -nargs=0 Reindent call Preserve('normal gg=G')

" I'm crazy enough to want this function, maybe
if has('win32')
  command! -nargs=1 Google silent !start https://google.com/search?q=<args>
  command! -nargs=1 Jisho silent !start https://jisho.org/search/<args>
else
  command! -nargs=1 Google silent !xdg-open https://google.com/search?q=<args>
  command! -nargs=1 Jisho silent !xdg-open https://jisho.org/search/<args>
endif

" Dealing with my typos
command! W w
command! -bang W w
command! Q q
command! -bang Q q

" Sudo write in UNIX
if !has('win32')
  command! -nargs=0 Sw w silent !sudo tee % > /dev/null
endif
" ================================ABBREVIATIONS=================================
" Force vertical splits for help files and expand gui window for help
cnoreabbrev <expr> help ((getcmdtype() is# ':'    && getcmdline() is# 'help')
            \?('let &columns=GVIM_WIDTH*2<CR>:vert help'):('help'))
cnoreabbrev <expr> h ((getcmdtype() is# ':'    && getcmdline() is# 'h')
            \?('let &columns=GVIM_WIDTH*2<CR>:vert help'):('h'))
