set encoding=utf-8
set fileencoding=utf-8
" ============================================================================
" VIM-PLUG BLOCK 
" ============================================================================
call plug#begin('~/vimfiles/plugged')

" Editing
Plug 'tpope/vim-surround'
Plug 'majutsushi/tagbar'
Plug 'terryma/vim-multiple-cursors'

" Syntax, Typically requires some setup
Plug 'scrooloose/syntastic'
if has('nvim')
	Plug 'roxma/nvim-completion-manager'
else
	Plug 'Valloric/YouCompleteMe'
endif

" File navigation
Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'}
Plug 'jistr/vim-nerdtree-tabs', {'on': 'NERDTreeToggle'}
Plug 'kien/ctrlp.vim'

" Appearances
Plug 'jnurmine/Zenburn'
Plug 'bling/vim-airline'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'vim-airline/vim-airline-themes'

" Git
Plug 'tpope/vim-fugitive'

call plug#end()

" ============================================================================
" FUNCTION DEFINITIONS
" ============================================================================

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction

function ExpandTabToggle()
    if &expandtab
        set expandtab!
    else
        set expandtab
    endif
endfunction

" ============================================================================
" BASIC SETTINGS
" ============================================================================
"System Settings
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

" Default Location
cd G:/Vim_Files

" General Settings
set ruler
set incsearch
set hlsearch
set number
set wrap
set guioptions=c
set listchars=tab:▸\ ,trail:·
set list
" :vs and :sp direction option
set splitright
set splitbelow
" Enable code bracket folding
set foldmethod=indent
set foldlevel=99
" Prevent change to Hiragana
set iminsert=0
set imsearch=-1

" Font settings
if has('gui_running')
    set guifont=Consolas:h12:cANSI:qDRAFT
endif

" Character limit highlighting
"highlight OverLength ctermbg=red ctermfg=white guibg=#592929
"match OverLength /\%81v.\+/
call matchadd('ColorColumn', '\%81v.', 100)

" Colors
if has('gui_running')
    colorscheme corporation "Obtain corporation from vivfy
else
    colorscheme zenburn
endif

" Indent Settings
set smartindent
set autoindent
set history=100
" Tab-sizing is 4
set tabstop=4
" Indenting with Tab is 4
set shiftwidth=4
" Turn tabs into spaces
"set expandtab
set softtabstop=4
set selection=inclusive
" Initial size
if has('gui_running')
	set lines=50 columns=100
endif
"Other general settings
set backspace=indent,eol,start

" ============================================================================
" KEYBINDINGS AND REMAPS
" ============================================================================
" NORMAL MODE
" Remap J, K to nagivate visible lines
nnoremap j gj
nnoremap k gk
" Edit vimrc
nnoremap <leader>v :edit $MYVIMRC<CR>
nnoremap <leader>V :tabnew $MYVIMRC<CR>
" Change directory to Git/Text folder
nnoremap <leader>f :cd G:/Vim_Files<CR>
nnoremap <leader>F :cd G:/Git<CR>
" Toggles off Highlighting
nnoremap <leader>h :nohl<CR>
" Toggles tab-to-space conversion
nnoremap <leader>t :call ExpandTabToggle()<CR>
" Change working directory to current file
nnoremap <leader>d :cd %:p:h<CR>
" Switch between splits
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" Switch between tabs
nnoremap <leader>[ :tabp<CR>
nnoremap <leader>] :tabn<CR>
" Fold in normal mode with space
nnoremap <space> za
" YouCompleteMe, Leader+g finds variable definition
nnoremap <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <F5> :NERDTreeToggle<CR>
" INSERT MODE
inoremap <C-BS> <C-W>
inoremap <C-Del> <ESC>dwi
" ABBREVEATIONS
" Force verticle splits for help files
cnoreabbrev <expr> help ((getcmdtype() is# ':'    && getcmdline() is# 'help')?('vert help'):('help'))
cnoreabbrev <expr> h ((getcmdtype() is# ':'    && getcmdline() is# 'h')?('vert help'):('h'))
" Automatically resize window to accomodate a right buffer
cnoreabbrev <expr> rsp ((getcmdtype() is# ':'    && getcmdline() is# 'rsp')?('set columns=200<CR>:vs'):('rsp'))
cnoreabbrev <expr> bq ((getcmdtype() is# ':'    && getcmdline() is# 'bq')?('q<CR>:set columns=100<CR>'):('bq'))

" ============================================================================
" PLUGIN-RELATED SETTINGS
" ============================================================================
" YouCompletMe settings. leader+g goes to definition
if !has('nvim')
    let g:ycm_autoclose_preview_window_after_completion=1
endif
" NerdTree Settings
let NERDTreeIgnore=['\.pyc$', '\~$', '\.class$'] "ignore files in NERDTree
let g:NERDTreeHijackNetrw=0
let g:nerdtree_tabs_open_on_gui_startup=0
" Indent Guides enabled by default
let g:indent_guides_enable_on_vim_startup = 1
" Airline theme
let g:airline_theme='deus'
